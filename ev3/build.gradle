group = 'de.westermann.robots.ev3'
version = '0.0.1-alpha'

apply plugin: 'com.bmuschko.docker-remote-api'

buildscript {
    ext.target = 'armv5te-unknown-linux-gnueabi'
    ext.isRelease = false
    ext.type = "debug"
    if (ext.isRelease) {
        ext.type = "release"
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.1'
    }
}

repositories {
    mavenCentral()
    jcenter()
}


import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile


task cargo {
    doLast {
        file("Cargo.toml").text = """[package]
name = "robots-rust"
version = "0.1.0"
authors = ["Lars Westermann <lars-westermann@live.de>"]

[dependencies]
byteorder = "1.2.6"
ev3dev-lang-rust = "0.2.0"
"""
    }
}


task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from "ubuntu:18.04"

    runCommand "apt update"
    runCommand "apt --yes install curl g++ g++-arm-linux-gnueabi"
    runCommand "curl https://sh.rustup.rs -sSf | sh -s -- -y"

    environmentVariable("PATH", "\$PATH:/root/.cargo/bin")

    runCommand "rustup target add ${target}"
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile

    inputDir = createDockerfile.destFile.parentFile
    tag = 'pixix4/ev3dev-rust-cross:latest'
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }

    binds = ["${file('.').absolutePath}": "/ev3"]
    stdinOpen = true
    tty = true
    workingDir = "/ev3"
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task removeContainer(type: DockerRemoveContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task stopContainer(type: DockerStopContainer) {
    finalizedBy removeContainer
    targetContainerId { createContainer.getContainerId() }
    onError { exception ->
        if (exception.message != null && exception.message.contains('No such container')) {
            println 'Container not running'
        } else {
            throw exception
        }
    }
}

task runContainer(type: DockerExecContainer) {
    dependsOn cargo
    dependsOn startContainer
    finalizedBy stopContainer

    targetContainerId { createContainer.getContainerId() }
    if (isRelease) {
        cmd = ["/root/.cargo/bin/cargo", "build", "--release", "--target", "${target}"]
    } else {
        cmd = ["/root/.cargo/bin/cargo", "build", "--target", "${target}"]
    }
    successOnExitCodes = [0]

    outputs.file(file("build/${target}/${type}/ev3"))
}

task nativeBuild(type: Exec) {
    dependsOn cargo
    executable = "cargo"
    if (isRelease) {
        args = ["build", "--release"]
    } else {
        args = ["build"]
    }

    ignoreExitValue = true

    outputs.file(file("build/${type}/ev3"))
}

task build() {
    dependsOn runContainer
    //dependsOn nativeBuild

    doLast {
        copy {
            println("Copy robot")
            from runContainer.outputs.files
            into "build"
            rename { it + "-robot" }
        }
        copy {
            println("Copy host")
            from nativeBuild.outputs.files
            into "build"
            rename { it + "-host" }
        }
    }

    outputs.file(file("build/ev3-robot"))
    outputs.file(file("build/ev3-host"))
}


task run(type: Exec) {
    dependsOn cargo
    executable = "cargo"
    args = ["run"]
}


task clean {
    delete("build")
    delete("Cargo.lock")
    delete("Cargo.toml")
}
